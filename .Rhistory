stat_ellipse(aes(group = as.factor(kcluster), fill = as.factor(kcluster)),
geom = "polygon", alpha = 0.2, color = NA) +
geom_text_repel(max.overlaps = 25) + theme_bw() + guides(size = 'none') +
scale_color_grey(start = .1, end = .6) +
#scale_color_viridis_d(begin = .3, end = .8)  +
guides(col = "none", fill = "none")
ggsave("archdistances_k_means.png", width = 7, height = 5)
# or with k-means clusters instead
set.seed(1705)
cosDist_mds %>% filter(logFreq>2) %>% ggplot(aes(x = V1, y = V2,
size = n*5, label = lemma, col = kcluster)) +
stat_ellipse(aes(group = as.factor(kcluster), fill = as.factor(kcluster)),
geom = "polygon", alpha = 0.1, color = NA) +
geom_text_repel(max.overlaps = 25) + theme_bw() + guides(size = 'none') +
scale_color_grey(start = .1, end = .6) +
#scale_color_viridis_d(begin = .3, end = .8)  +
guides(col = "none", fill = "none")
ggsave("archdistances_k_means.png", width = 7, height = 5)
# or with k-means clusters instead
set.seed(1705)
cosDist_mds %>% filter(logFreq>2) %>% ggplot(aes(x = V1, y = V2,
size = n*5, label = lemma)) +
stat_ellipse(aes(group = as.factor(kcluster), fill = as.factor(kcluster)),
geom = "polygon", alpha = 0.1, color = NA) +
geom_text_repel(max.overlaps = 25) + theme_bw() + guides(size = 'none') +
scale_color_grey(start = .1, end = .6) +
#scale_color_viridis_d(begin = .3, end = .8)  +
guides(col = "none", fill = "none")
ggsave("archdistances_k_means.png", width = 7, height = 5)
ggsave("archdistances_k_means.png", width = 7, height = 5, dpi = 300)
ggsave("archdistances_k_means.png", width = 7, height = 5, dpi = 600)
rm(list=ls())
# Chunk 1
library(tidyverse)
library(wordVectors)
library(vroom)
library(pbapply)
library(readxl)
library(ggrepel)
library(cluster)
# Chunk 2
# read nouns
arch_nouns <- read_xlsx("COW16 nouns cleaned.xlsx")
# read adj
arch_adj   <- read_xlsx("COW16 adjectives cleaned.xlsx")
# Chunk 3
# remove false hits
arch_adj <- filter(arch_adj, Keep=="y")
arch_nouns <- filter(arch_nouns, Keep=="y")
# get bases
arch_adj$Base_Lemma <- gsub("^arch-?", "", arch_adj$Token)
arch_nouns$Base_Lemma <- gsub("^arch-?", "", arch_nouns$Token)
# make sheet for annotating lexemes / correcting lemmas
# rbind(mutate(arch_adj, pos = "ADJ"), mutate(arch_nouns, pos = "N")) %>% writexl::write_xlsx("arch_adj_n.xlsx")
# read in again
arch <- read_xlsx("arch_adj_n.xlsx")
# Chunk 1
library(tidyverse)
library(wordVectors)
library(vroom)
library(pbapply)
library(readxl)
library(ggrepel)
library(cluster)
# Chunk 2
# read nouns
arch_nouns <- read_xlsx("COW16 nouns cleaned.xlsx")
# read adj
arch_adj   <- read_xlsx("COW16 adjectives cleaned.xlsx")
# Chunk 3
# remove false hits
arch_adj <- filter(arch_adj, Keep=="y")
arch_nouns <- filter(arch_nouns, Keep=="y")
# get bases
arch_adj$Base_Lemma <- gsub("^arch-?", "", arch_adj$Token)
arch_nouns$Base_Lemma <- gsub("^arch-?", "", arch_nouns$Token)
# make sheet for annotating lexemes / correcting lemmas
# rbind(mutate(arch_adj, pos = "ADJ"), mutate(arch_nouns, pos = "N")) %>% writexl::write_xlsx("arch_adj_n.xlsx")
# read in again
arch <- read_xlsx("arch_adj_n.xlsx")
# Chunk 4
model <- readRDS("/Users/stefanhartmann/sciebo/Projekte/snowclones/word2vec/model.Rds")
# Chunk 1
library(tidyverse)
library(wordVectors)
library(vroom)
library(pbapply)
library(readxl)
library(ggrepel)
library(cluster)
# Chunk 2
# read nouns
arch_nouns <- read_xlsx("COW16 nouns cleaned.xlsx")
# read adj
arch_adj   <- read_xlsx("COW16 adjectives cleaned.xlsx")
# Chunk 3
# remove false hits
arch_adj <- filter(arch_adj, Keep=="y")
arch_nouns <- filter(arch_nouns, Keep=="y")
# get bases
arch_adj$Base_Lemma <- gsub("^arch-?", "", arch_adj$Token)
arch_nouns$Base_Lemma <- gsub("^arch-?", "", arch_nouns$Token)
# make sheet for annotating lexemes / correcting lemmas
# rbind(mutate(arch_adj, pos = "ADJ"), mutate(arch_nouns, pos = "N")) %>% writexl::write_xlsx("arch_adj_n.xlsx")
# read in again
arch <- read_xlsx("arch_adj_n.xlsx")
# Chunk 4
#| message: false
#| warning: false
#| include: false
model <- readRDS("/Users/stefanhartmann/sciebo/Projekte/snowclones/word2vec/model.Rds")
model
# Chunk 1
#| message: false
#| warning: false
#| code-fold: true
library(tidyverse)
library(wordVectors)
library(vroom)
library(pbapply)
library(readxl)
library(ggrepel)
library(cluster)
# Chunk 2
#| message: false
#| warning: false
# read nouns
arch_nouns <- read_xlsx("data/COW16 nouns cleaned.xlsx")
# read adj
arch_adj   <- read_xlsx("data/COW16 adjectives cleaned.xlsx")
# Chunk 3
#| message: false
#| warning: false
# remove false hits
arch_adj <- filter(arch_adj, Keep=="y")
arch_nouns <- filter(arch_nouns, Keep=="y")
# get bases
arch_adj$Base_Lemma <- gsub("^arch-?", "", arch_adj$Token)
arch_nouns$Base_Lemma <- gsub("^arch-?", "", arch_nouns$Token)
# make sheet for annotating lexemes / correcting lemmas
# rbind(mutate(arch_adj, pos = "ADJ"), mutate(arch_nouns, pos = "N")) %>% writexl::write_xlsx("arch_adj_n.xlsx")
# read in again
arch <- read_xlsx("data/arch_adj_n.xlsx")
# Chunk 4
#| message: false
#| warning: false
#| include: false
model <- readRDS("/Users/stefanhartmann/sciebo/Projekte/snowclones/word2vec/model.Rds")
# Chunk 6
#| message: false
#| warning: false
# get lemmas
lemmas <- sort(unique(arch$Base_Lemma))
# get Cosine distance
cosDist_mds <- cosineDist(model[[tolower(lemmas), average = FALSE]], model[[tolower(lemmas), average = FALSE]]) %>% cmdscale()
# get k-means clusters
plot(1:10, sapply(1:10, function(x) kmeans(cosDist_mds, x, nstart = 25)$tot.withinss), type = "b", ylab = "WCSS")
k_means_clusters <- kmeans(cosDist_mds, 3, nstart = 25)
# as df
cosDist_mds <- cosDist_mds %>% as.data.frame() %>% rownames_to_column()
colnames(cosDist_mds)[1] <- "lemma"
# add frequency information
freqs <- rbind(arch_adj, arch_nouns) %>% select(Base_Lemma, Frequency) %>%
group_by(Base_Lemma) %>%
summarise(
n = sum(Frequency)
) %>% setNames(c("lemma", "n"))
# multidimensional scaling
cosDist_mds <- left_join(cosDist_mds, freqs) %>% replace_na(list(n = 0))
# also add log frequency
cosDist_mds$logFreq <- log1p(cosDist_mds$n)
# add k-means clusters to df
cosDist_mds$kcluster <- as.factor(as.numeric(k_means_clusters$cluster))
# Chunk 7
#| message: false
#| warning: false
set.seed(1705)
cosDist_mds %>% filter(logFreq>2) %>% ggplot(aes(x = V1, y = V2,
size = n*5, label = lemma)) +
stat_ellipse(aes(group = as.factor(kcluster), fill = as.factor(kcluster)),
geom = "polygon", alpha = 0.1, color = NA) +
geom_text_repel(max.overlaps = 25) + theme_bw() + guides(size = 'none') +
guides(col = "none", fill = "none")
cosDist_mds %>% filter(logFreq>2) %>% ggplot(aes(x = V1, y = V2,
size = n*5, label = lemma)) +
stat_ellipse(aes(group = as.factor(kcluster), fill = as.factor(kcluster)),
geom = "polygon", alpha = 0.1, color = NA) +
geom_text_repel(max.overlaps = 25) + theme_bw() + guides(size = 'none') +
guides(col = "none", fill = "none") +
theme(panel.grid.major = 'none', panel.grid.minor = 'none')
#| message: false
#| warning: false
set.seed(1705)
cosDist_mds %>% filter(logFreq>2) %>% ggplot(aes(x = V1, y = V2,
size = n*5, label = lemma)) +
stat_ellipse(aes(group = as.factor(kcluster), fill = as.factor(kcluster)),
geom = "polygon", alpha = 0.1, color = NA) +
geom_text_repel(max.overlaps = 25) + theme_bw() + guides(size = 'none') +
guides(col = "none", fill = "none") +
theme(panel.grid.major = 'none', panel.grid.minor = 'none')
cosDist_mds %>% filter(logFreq>2) %>% ggplot(aes(x = V1, y = V2,
size = n*5, label = lemma)) +
stat_ellipse(aes(group = as.factor(kcluster), fill = as.factor(kcluster)),
geom = "polygon", alpha = 0.1, color = NA) +
geom_text_repel(max.overlaps = 25) + theme_bw() + guides(size = 'none') +
guides(col = "none", fill = "none") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggsave("images/archdistances_k_means.png", width = 7, height = 5, dpi = 600)
# Chunk 1
#| message: false
#| warning: false
#| code-fold: true
library(tidyverse)
library(wordVectors)
library(vroom)
library(pbapply)
library(readxl)
library(ggrepel)
library(cluster)
# Chunk 2
#| message: false
#| warning: false
# read nouns
arch_nouns <- read_xlsx("data/COW16 nouns cleaned.xlsx")
# read adj
arch_adj   <- read_xlsx("data/COW16 adjectives cleaned.xlsx")
# Chunk 3
#| message: false
#| warning: false
# remove false hits
arch_adj <- filter(arch_adj, Keep=="y")
arch_nouns <- filter(arch_nouns, Keep=="y")
# get bases
arch_adj$Base_Lemma <- gsub("^arch-?", "", arch_adj$Token)
arch_nouns$Base_Lemma <- gsub("^arch-?", "", arch_nouns$Token)
# make sheet for annotating lexemes / correcting lemmas
# rbind(mutate(arch_adj, pos = "ADJ"), mutate(arch_nouns, pos = "N")) %>% writexl::write_xlsx("arch_adj_n.xlsx")
# read in again
arch <- read_xlsx("data/arch_adj_n.xlsx")
# Chunk 4
#| message: false
#| warning: false
#| include: false
model <- readRDS("/Users/stefanhartmann/sciebo/Projekte/snowclones/word2vec/model.Rds")
# Chunk 6
#| message: false
#| warning: false
# get lemmas
lemmas <- sort(unique(arch$Base_Lemma))
# get Cosine distance
cosDist_mds <- cosineDist(model[[tolower(lemmas), average = FALSE]], model[[tolower(lemmas), average = FALSE]]) %>% cmdscale()
# get k-means clusters
plot(1:10, sapply(1:10, function(x) kmeans(cosDist_mds, x, nstart = 25)$tot.withinss), type = "b", ylab = "WCSS")
k_means_clusters <- kmeans(cosDist_mds, 3, nstart = 25)
# as df
cosDist_mds <- cosDist_mds %>% as.data.frame() %>% rownames_to_column()
colnames(cosDist_mds)[1] <- "lemma"
# add frequency information
freqs <- rbind(arch_adj, arch_nouns) %>% select(Base_Lemma, Frequency) %>%
group_by(Base_Lemma) %>%
summarise(
n = sum(Frequency)
) %>% setNames(c("lemma", "n"))
# multidimensional scaling
cosDist_mds <- left_join(cosDist_mds, freqs) %>% replace_na(list(n = 0))
# also add log frequency
cosDist_mds$logFreq <- log1p(cosDist_mds$n)
# add k-means clusters to df
cosDist_mds$kcluster <- as.factor(as.numeric(k_means_clusters$cluster))
# Chunk 7
#| message: false
#| warning: false
set.seed(1705)
cosDist_mds %>% filter(logFreq>2) %>% ggplot(aes(x = V1, y = V2,
size = n*5, label = lemma)) +
stat_ellipse(aes(group = as.factor(kcluster), fill = as.factor(kcluster)),
geom = "polygon", alpha = 0.1, color = NA) +
geom_text_repel(max.overlaps = 25) + theme_bw() + guides(size = 'none') +
guides(col = "none", fill = "none") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# ggsave("images/archdistances_k_means.png", width = 7, height = 5, dpi = 600)
# Chunk 1
#| message: false
#| warning: false
#| code-fold: true
library(tidyverse)
library(wordVectors)
library(vroom)
library(pbapply)
library(readxl)
library(ggrepel)
library(cluster)
# Chunk 2
#| message: false
#| warning: false
# read nouns
arch_nouns <- read_xlsx("data/COW16 nouns cleaned.xlsx")
# read adj
arch_adj   <- read_xlsx("data/COW16 adjectives cleaned.xlsx")
# Chunk 3
#| message: false
#| warning: false
# remove false hits
arch_adj <- filter(arch_adj, Keep=="y")
arch_nouns <- filter(arch_nouns, Keep=="y")
# get bases
arch_adj$Base_Lemma <- gsub("^arch-?", "", arch_adj$Token)
arch_nouns$Base_Lemma <- gsub("^arch-?", "", arch_nouns$Token)
# make sheet for annotating lexemes / correcting lemmas
# rbind(mutate(arch_adj, pos = "ADJ"), mutate(arch_nouns, pos = "N")) %>% writexl::write_xlsx("arch_adj_n.xlsx")
# read in again
arch <- read_xlsx("data/arch_adj_n.xlsx")
# Chunk 4
#| message: false
#| warning: false
#| include: false
model <- readRDS("/Users/stefanhartmann/sciebo/Projekte/snowclones/word2vec/model.Rds")
# Chunk 6
#| message: false
#| warning: false
# get lemmas
lemmas <- sort(unique(arch$Base_Lemma))
# get Cosine distance
cosDist_mds <- cosineDist(model[[tolower(lemmas), average = FALSE]], model[[tolower(lemmas), average = FALSE]]) %>% cmdscale()
# get k-means clusters
plot(1:10, sapply(1:10, function(x) kmeans(cosDist_mds, x, nstart = 25)$tot.withinss), type = "b", ylab = "WCSS")
k_means_clusters <- kmeans(cosDist_mds, 3, nstart = 25)
# as df
cosDist_mds <- cosDist_mds %>% as.data.frame() %>% rownames_to_column()
colnames(cosDist_mds)[1] <- "lemma"
# add frequency information
freqs <- rbind(arch_adj, arch_nouns) %>% select(Base_Lemma, Frequency) %>%
group_by(Base_Lemma) %>%
summarise(
n = sum(Frequency)
) %>% setNames(c("lemma", "n"))
# multidimensional scaling
cosDist_mds <- left_join(cosDist_mds, freqs) %>% replace_na(list(n = 0))
# also add log frequency
cosDist_mds$logFreq <- log1p(cosDist_mds$n)
# add k-means clusters to df
cosDist_mds$kcluster <- as.factor(as.numeric(k_means_clusters$cluster))
# Chunk 7
#| message: false
#| warning: false
set.seed(1705)
cosDist_mds %>% filter(logFreq>1.5) %>% ggplot(aes(x = V1, y = V2,
size = n*5, label = lemma)) +
stat_ellipse(aes(group = as.factor(kcluster), fill = as.factor(kcluster)),
geom = "polygon", alpha = 0.1, color = NA) +
geom_text_repel(max.overlaps = 25) + theme_bw() + guides(size = 'none') +
guides(col = "none", fill = "none") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# ggsave("images/archdistances_k_means.png", width = 7, height = 5, dpi = 600)
ggsave("images/archdistances_k_means.png", width = 7, height = 5, dpi = 600)
#| message: false
#| warning: false
set.seed(1705)
#| message: false
#| warning: false
set.seed(1705)
cosDist_mds %>% filter(n>5) %>% ggplot(aes(x = V1, y = V2,
size = n*5, label = lemma)) +
stat_ellipse(aes(group = as.factor(kcluster), fill = as.factor(kcluster)),
geom = "polygon", alpha = 0.1, color = NA) +
geom_text_repel(max.overlaps = 25) + theme_bw() + guides(size = 'none') +
guides(col = "none", fill = "none") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
#| message: false
#| warning: false
set.seed(1705)
#| message: false
#| warning: false
set.seed(1705)
cosDist_mds %>% filter(n>4) %>% ggplot(aes(x = V1, y = V2,
size = n*5, label = lemma)) +
stat_ellipse(aes(group = as.factor(kcluster), fill = as.factor(kcluster)),
geom = "polygon", alpha = 0.1, color = NA) +
geom_text_repel(max.overlaps = 25) + theme_bw() + guides(size = 'none') +
guides(col = "none", fill = "none") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
#| message: false
#| warning: false
set.seed(1705)
#| message: false
#| warning: false
set.seed(1705)
cosDist_mds %>% filter(n>2) %>% ggplot(aes(x = V1, y = V2,
size = n*5, label = lemma)) +
stat_ellipse(aes(group = as.factor(kcluster), fill = as.factor(kcluster)),
geom = "polygon", alpha = 0.1, color = NA) +
geom_text_repel(max.overlaps = 25) + theme_bw() + guides(size = 'none') +
guides(col = "none", fill = "none") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
#| message: false
#| warning: false
set.seed(1705)
cosDist_mds %>%
# filter(n>2) %>%
ggplot(aes(x = V1, y = V2,
size = n*5, label = lemma)) +
stat_ellipse(aes(group = as.factor(kcluster), fill = as.factor(kcluster)),
geom = "polygon", alpha = 0.1, color = NA) +
geom_text_repel(max.overlaps = 25) + theme_bw() + guides(size = 'none') +
guides(col = "none", fill = "none") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggsave("images/archdistances_k_means.png", width = 7, height = 5, dpi = 600)
#| message: false
#| warning: false
set.seed(1705)
#| message: false
#| warning: false
set.seed(1705)
cosDist_mds %>%
filter(n>4) %>%
ggplot(aes(x = V1, y = V2,
size = n*5, label = lemma)) +
stat_ellipse(aes(group = as.factor(kcluster), fill = as.factor(kcluster)),
geom = "polygon", alpha = 0.1, color = NA) +
geom_text_repel(max.overlaps = 25) + theme_bw() + guides(size = 'none') +
guides(col = "none", fill = "none") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggsave("images/archdistances_k_means.png", width = 7, height = 5, dpi = 600)
library(ggiraph)
#| message: false
#| warning: false
#| fig-width: 20
#| fig-height: 20
set.seed(1705)
p <- cosDist_mds %>%
# filter(n>4) %>%
ggplot(aes(x = V1, y = V2,
size = n*5, label = lemma)) +
stat_ellipse(aes(group = as.factor(kcluster), fill = as.factor(kcluster)),
geom = "polygon", alpha = 0.1, color = NA) +
geom_text_repel(max.overlaps = 25) + theme_bw() + guides(size = 'none') +
guides(col = "none", fill = "none") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
#| message: false
#| warning: false
#| fig-width: 20
#| fig-height: 20
set.seed(1705)
p <- cosDist_mds %>%
# filter(n>4) %>%
ggplot(aes(x = V1, y = V2,
size = n*5, label = lemma)) +
stat_ellipse(aes(group = as.factor(kcluster), fill = as.factor(kcluster)),
geom = "polygon", alpha = 0.1, color = NA) +
geom_text_repel(max.overlaps = 25) + theme_bw() + guides(size = 'none') +
guides(col = "none", fill = "none") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
g <- girafe(ggobj = p,
options = list(
opts_zoom(max = 5),   # Allow zooming up to 5x
opts_sizing(rescale = TRUE),
opts_toolbar(saveaspng = TRUE)
))
g
?girafe
?opts_toolbar
set.seed(1705)
set.seed(1705)
cosDist_mds %>%
filter(n>4) %>%
ggplot(aes(x = V1, y = V2,
size = n*5, label = lemma)) +
stat_ellipse(aes(group = as.factor(kcluster), fill = as.factor(kcluster)),
geom = "polygon", alpha = 0.1, color = NA) +
geom_text() + theme_bw() + guides(size = 'none') +
guides(col = "none", fill = "none") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggsave("images/archdistances_k_means.png", width = 7, height = 5, dpi = 600)
set.seed(1705)
cosDist_mds %>%
filter(n>4) %>%
ggplot(aes(x = V1, y = V2,
size = n*5, label = lemma)) +
stat_ellipse(aes(group = as.factor(kcluster), fill = as.factor(kcluster)),
geom = "polygon", alpha = 0.1, color = NA) +
geom_text_repel(max.overlaps = 35) + theme_bw() + guides(size = 'none') +
guides(col = "none", fill = "none") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggsave("images/archdistances_k_means.png", width = 7, height = 5, dpi = 600)
cosDist_mds %>%
filter(n>4) %>%
ggplot(aes(x = V1, y = V2,
size = n*5, label = lemma)) +
stat_ellipse(aes(group = as.factor(kcluster), fill = as.factor(kcluster)),
geom = "polygon", alpha = 0.1, color = NA) +
geom_text_repel(max.overlaps = 35, seed = 1705) + theme_bw() + guides(size = 'none') +
guides(col = "none", fill = "none") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
cosDist_mds %>%
filter(n>4) %>%
ggplot(aes(x = V1, y = V2,
size = n*5, label = lemma)) +
stat_ellipse(aes(group = as.factor(kcluster), fill = as.factor(kcluster)),
geom = "polygon", alpha = 0.1, color = NA) +
geom_text_repel(max.overlaps = 35, seed = 1705, segments(lwd = .2)) + theme_bw() + guides(size = 'none') +
guides(col = "none", fill = "none") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
cosDist_mds %>%
filter(n>4) %>%
ggplot(aes(x = V1, y = V2,
size = n*5, label = lemma)) +
stat_ellipse(aes(group = as.factor(kcluster), fill = as.factor(kcluster)),
geom = "polygon", alpha = 0.1, color = NA) +
geom_text_repel(max.overlaps = 35, seed = 1705, segment.size = .2) + theme_bw() + guides(size = 'none') +
guides(col = "none", fill = "none") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggsave("images/archdistances_k_means.png", width = 7, height = 5, dpi = 600)
